Create Table USERS(
    USER_ID INT PRIMARY KEY,
    USERNAME VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(50),
    EMAIL VARCHAR(100) NOT NULL,
    PHONE_NUMBER VARCHAR(15),
    DATE_OF_BIRTH DATE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE (USERNAME), -- Ensures no duplicate usernames
    UNIQUE (EMAIL) -- Ensures no duplicate emails
);


CREATE TABLE THEATRES(
    THEATRE_ID INT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    TYPE VARCHAR(50),
    CAPACITY INT NOT NULL,
    LOCATION VARCHAR(100),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE (NAME, LOCATION) -- Ensures no duplicate theatre names in the same location
);

CREATE TABLE SCREENS(
    SCREEN_ID INT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    THEATRE_ID INT NOT NULL,
    CAPACITY INT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (THEATRE_ID) REFERENCES THEATRES(THEATRE_ID),
    UNIQUE (NAME, THEATRE_ID) -- Ensures no duplicate screen names in the same theatre
);

CREATE TABLE MOVIES(
    MOVIE_ID INT PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    GENRE VARCHAR(50),
    DURATION INT NOT NULL, -- Duration in minutes
    LANGUAGE VARCHAR(50),
    RELEASE_DATE DATE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE (TITLE, RELEASE_DATE) -- Ensures no duplicate movies with the same title and release date
);


CREATE TABLE SHOWS(
    SHOW_ID INT PRIMARY KEY,
    MOVIE_ID INT NOT NULL,
    SCREEN_ID INT NOT NULL,
    SHOW_TIME DATETIME NOT NULL,
    PRICE DECIMAL(10, 2) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES(MOVIE_ID),
    FOREIGN KEY (SCREEN_ID) REFERENCES SCREENS(SCREEN_ID)
);

CREATE TABLE BOOKINGS(
    BOOKING_ID INT PRIMARY KEY,
    USER_ID INT NOT NULL,
    SHOW_ID INT NOT NULL,
    BOOKING_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TOTAL_AMOUNT DECIMAL(10, 2) NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'CONFIRMED',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (SHOW_ID) REFERENCES SHOWS(SHOW_ID)
);

CREATE TABLE SEATS(
    SEAT_ID INT PRIMARY KEY,
    SCREEN_ID INT NOT NULL,
    SEAT_NUMBER VARCHAR(10) NOT NULL,
    IS_AVAILABLE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (SCREEN_ID) REFERENCES SCREENS(SCREEN_ID),
    UNIQUE (SCREEN_ID, SEAT_NUMBER) -- Ensures no duplicate seat numbers in the same screen
);

CREATE TABLE BOOKING_SEATS(
    BOOKING_ID INT NOT NULL,
    SEAT_ID INT NOT NULL,
    PRIMARY KEY (BOOKING_ID, SEAT_ID),
    FOREIGN KEY (BOOKING_ID) REFERENCES BOOKINGS(BOOKING_ID),
    FOREIGN KEY (SEAT_ID) REFERENCES SEATS(SEAT_ID),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);
